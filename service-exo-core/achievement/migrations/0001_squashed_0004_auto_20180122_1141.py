# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2018-02-01 08:56
from __future__ import unicode_literals

from django.conf import settings
import django.contrib.postgres.fields.hstore
import django.contrib.postgres.fields.jsonb
import django.contrib.postgres.operations
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import model_utils.fields


def create_achievement_reward_for_coins(apps, schema_editor):
    Achievement = apps.get_model('achievement', 'Achievement')
    Reward = apps.get_model('achievement', 'Reward')

    achievement = Achievement.objects.create(
        code=settings.ACHIEVEMENT_CH_CODE_FILL_PROFILE,
        name='Fill profile',
    )
    reward = Reward.objects.create(
        code=settings.ACHIEVEMENT_REWARD_CH_CODE_COIN,
        name='Receiving coins',
        extra_data={'link': '', 'coins': 0},
    )
    achievement.rewards.add(reward)


class Migration(migrations.Migration):

    replaces = [
        ('achievement', '0001_initial'), ('achievement', '0002_userreward_extra_data'),
        ('achievement', '0003_auto_20171214_1117'), ('achievement', '0004_auto_20180122_1141'),
    ]

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        django.contrib.postgres.operations.HStoreExtension(
        ),
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'created', model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name='created',
                    ),
                ),
                (
                    'modified', model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name='modified',
                    ),
                ),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(choices=[('F', 'Fill profile')], max_length=1)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Reward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'created', model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name='created',
                    ),
                ),
                (
                    'modified', model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name='modified',
                    ),
                ),
                ('name', models.CharField(max_length=200)),
                ('code', models.CharField(choices=[('C', 'Coins')], max_length=1)),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'created', model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name='created',
                    ),
                ),
                (
                    'modified', model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name='modified',
                    ),
                ),
                ('status', models.CharField(choices=[('C', 'Completed'), ('P', 'Pending')], default='P', max_length=1)),
                (
                    'achievement', models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='users', to='achievement.Achievement',
                    ),
                ),
                (
                    'user', models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='achievements', to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='UserReward',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                (
                    'created', model_utils.fields.AutoCreatedField(
                        default=django.utils.timezone.now, editable=False, verbose_name='created',
                    ),
                ),
                (
                    'modified', model_utils.fields.AutoLastModifiedField(
                        default=django.utils.timezone.now, editable=False, verbose_name='modified',
                    ),
                ),
                ('status', models.CharField(choices=[('C', 'Completed'), ('P', 'Pending')], default='P', max_length=1)),
                (
                    'reward', models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='users', to='achievement.Reward',
                    ),
                ),
                (
                    'user', models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name='rewards', to=settings.AUTH_USER_MODEL,
                    ),
                ),
                ('extra_data', django.contrib.postgres.fields.jsonb.JSONField()),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='achievement',
            name='rewards',
            field=models.ManyToManyField(blank=True, related_name='achievements', to='achievement.Reward'),
        ),
        migrations.RunPython(
            code=create_achievement_reward_for_coins,
        ),
    ]
