"""
Django settings for exolibrary project.

Generated by 'django-admin startproject' using Django 2.0.2.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os
import re
import sys
import sentry_sdk

from sentry_sdk.integrations.django import DjangoIntegration
from sentry_sdk.integrations.celery import CeleryIntegration
from sentry_sdk.integrations.redis import RedisIntegration

from .logging import LOGGING  # noqa
from .local import *  # noqa
from .apps import *  # noqa
from .jwt_settings import *  # noqa


# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
TEST_MODE = sys.argv[1:2] == ['test']
SERVICE_SHORT_NAME = SERVICE_NAME.split('-')[-1]  # noqa

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/
SECRET_KEY = os.environ.get('SECRET_KEY', '(@ld*aiy5419but+akxofqmng1_p8c(57w1772hnoe58ydui^7')

BRAND_NAME = 'OpenExO'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'auth_uuid.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'service.urls'

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
        'rest_framework.authentication.BasicAuthentication',
    ),
    'DEFAULT_VERSIONING_CLASS': 'rest_framework.versioning.URLPathVersioning',
    'DEFAULT_RENDERER_CLASSES': (
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer',
        'rest_framework.renderers.JSONRenderer',
    ),
    'DEFAULT_PARSER_CLASSES': [
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
        'rest_framework.parsers.FormParser',
        'rest_framework.parsers.MultiPartParser',
        'rest_framework.parsers.JSONParser',
    ],
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'TEST_REQUEST_RENDERER_CLASSES': (
        'rest_framework.renderers.MultiPartRenderer',
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.TemplateHTMLRenderer'
    )
}

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates')
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages'
            ],
        },
    },
]

WSGI_APPLICATION = 'service.wsgi.application'
ASGI_APPLICATION = 'service.routing.application'

AUTH_USER_MODEL = 'auth_uuid.UserUUID'

# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

if 'STATIC_URL' not in vars():
    STATIC_URL = '/static/'
    STATIC_ROOT = os.path.join(BASE_DIR, 'static')

if 'MEDIA_URL' not in vars():
    MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
    MEDIA_URL = '/media/'

EMAIL_HOST = 'smtp.sendgrid.net'
EMAIL_HOST_USER = 'apikey'
EMAIL_HOST_PASSWORD = os.environ.get('EMAIL_HOST_PASSWORD', '')
EMAIL_PORT = 587
EMAIL_USE_TLS = True
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'

EMBED_VIDEO_BACKENDS = (
    'utils.backends.youtube.YoutubeCustomBackend',
    'utils.backends.vimeo.VimeoCustomBackend',
    'utils.backends.drive.GoogleDriveCustomBackend',
    'utils.backends.dropbox.DropboxCustomBackend',
    'utils.backends.filestack.FileStackCustomBackend',
)

ALLOWED_DOMAIN_VIDEO = 'openexo.com'

FAKER_SETTINGS_LOCALE = 'en_GB'

CORS_ORIGIN_ALLOW_ALL = True
CORS_ALLOW_CREDENTIALS = True

CH_CODE_MESSAGE_RESOURCE_UPLOAD = 'R'

ADITIONAL_EXO_MESSAGES_CODE = (
    (CH_CODE_MESSAGE_RESOURCE_UPLOAD, 'RESOURCE_UPLOAD'),
)

INTERNAL_REDIRECT = 'internal_redirect'

SESSION_ENGINE = 'redis_sessions.session'
SESSION_REDIS = {
    'host': REDIS_HOST,
    'port': REDIS_PORT,
    'db': REDIS_AUTH_DB,
    'prefix': 'session',
    'socket_timeout': 1,
    'retry_on_timeout': False
}


CHANNEL_LAYERS = {
    'default': {
        'BACKEND': 'channels_redis.core.RedisChannelLayer',
        'CONFIG': {
            'hosts': [
                'redis://{}:{}/{}'.format(
                    REDIS_HOST,
                    REDIS_PORT,
                    REDIS_CHANNELS_DB
                ),
            ],
            'prefix': SERVICE_NAME,
            'symmetric_encryption_keys': [SECRET_KEY],
            'channel_capacity': {
                'http.request': 200,
                'http.response!*': 10,
                re.compile(r'^websocket.send\!.+'): 20,
            }
        }
    }
}
AUTH_SECRET_KEY = os.environ.get('AUTH_SECRET_KEY', 'o134467ss##w@kusnw@)1d2uu%#blvj!+1ej6obgc@%q=wr)&4')


# SENTRY
if SENTRY_DSN:
    sentry_sdk.init(
        dsn=SENTRY_DSN,
        environment=SENTRY_ENV,
        release=SENTRY_VER,
        integrations=[
            DjangoIntegration(),
            CeleryIntegration(),
            RedisIntegration(),
        ]
    )


if DEBUG:
    from .debug import *  # noqa

if TEST_MODE:
    from .test_settings_override import *  # noqa
