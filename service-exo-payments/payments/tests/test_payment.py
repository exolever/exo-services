import requests_mock

from django.conf import settings
from django.test import TestCase, Client

from rest_framework import status
from unittest.mock import patch


from utils.faker_factory import faker
from utils.test_mixin import UserTestMixin

from ..models import Payment


class LegacyTestCase(UserTestMixin, TestCase):

    @patch('utils.mails.handlers.mail_handler.send_mail')
    def setUp(self, mock_email):
        self.create_user()
        self.payment = Payment.objects.create(
            created_by=self.user,
            amount=int(faker.numerify()) * 0.01,
            concept=faker.sentence(),
            email=faker.email(),
            full_name=faker.name(),
        )

        self.assertTrue(mock_email.called)

    def test_hash_code_is_autogenerated(self):

        # ASSERTS
        self.assertIsNotNone(self.payment._hash_code)
        self.assertIsNotNone(self.payment.url)

    def test_view_for_do_payment_accesible_if_pending(self):
        # PREPARE DATA
        client = Client()

        # DO ACTION
        response = client.get(self.payment.url)

        self.assertTrue(self.payment.is_pending)
        self.assertTrue(status.is_success(response.status_code))

    def test_view_do_payment_no_accesible_if_not_pending_or_errored(self):
        # PREPARE DATA
        client = Client()

        test_cases = [
            settings.PAYMENTS_CH_CANCELED,
            settings.PAYMENTS_CH_ERASED,
            settings.PAYMENTS_CH_PAID,
            settings.PAYMENTS_CH_VALIDATED,
        ]

        for test in test_cases:
            self.payment.status = test
            self.payment.save(update_fields=['status'])

            # DO ACTION
            response = client.get(self.payment.url)

            # ASSERTIONS
            self.assertFalse(self.payment.is_pending)
            self.assertTrue(status.is_redirect(response.status_code))

    @requests_mock.Mocker()
    def test_send_webhook(self, mock_request):
        # PREPARE DATA
        self.payment.url_notification = faker.uri()
        self.payment.save()

        mock_request.register_uri(
            'PUT',
            self.payment.url_notification,
            json={'status': 'OK'})

        # DO ACTION
        self.payment.notify_webhook()

        # ASSERTS
        self.assertTrue(mock_request.called)

    def test_is_european(self):
        # PREPARE DATA
        self.payment.country_code = 'FR'
        self.payment.save()

        # ASSERTS
        self.assertTrue(self.payment.is_european)
